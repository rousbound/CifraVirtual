#!/usr/bin/env python3.6
from GUI import*
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMainWindow
import os
from Summarizer import *
from get_livebus import*
import datetime
import time

import sys
import os
sys.path.append(os.getcwd() + '/Suspended')
#from password import*

import threading
from MusicManager import*

class Main:
    def __init__(self):
        self.ui = Ui_AtelieVirtual()
        self.mainWindow = QMainWindow()
        #self.player = None
        self.ui.setupUi(self.mainWindow)
        self.mainWindow.resize(791, 808)

        self.blank = QtWidgets.QWidget()
        self.ui.Stack.addWidget(self.blank)
        self.ui.Stack.setCurrentIndex(6)
        self.connect(self.ui)
        #self.loadListFiles("Music/",self.ui.musicList)
        self.loadListFiles("Activities/",self.ui.actList)
        #self.loadListFiles("MyMusic/",self.ui.musicList)
        self.opened = "None"



    def connect(self,MainWindow):
        MainWindow.actionGeneral.triggered.connect(lambda: self.OpenWindow(0))
        MainWindow.actionPsychoanalysis.triggered.connect(lambda: self.OpenWindow(1,"psychoanalysis"))
        MainWindow.actionAllFriends.triggered.connect(lambda: self.OpenWindow(2))
        MainWindow.actionWebScraper.triggered.connect(lambda: self.OpenWindow(3))
        MainWindow.actionDiaryProject.triggered.connect(lambda: self.OpenWindow(1,"diaryProject"))
        MainWindow.actionSongs.triggered.connect(lambda: self.OpenWindow(4,"Music/"))
        MainWindow.actionCompositions.triggered.connect(lambda: self.OpenWindow(4,"MyMusic/"))


        MainWindow.actionBusTracking.triggered.connect(lambda: self.OpenWindow(5))

        MainWindow.actAddEntryButton.clicked.connect(lambda: self.newListItem(lineEntry = self.ui.actLineEntry, textDisplay = self.ui.actTextDisplay, list = self.ui.actList))
        MainWindow.actSaveButton.clicked.connect(lambda: self.listSave(self.ui.actTextDisplay,"",self.ui.actList,folder = "Activities/"))
        MainWindow.actList.itemClicked.connect(lambda: self.openItem("Activities/",self.ui.actList,self.ui.actTextDisplay))



        MainWindow.diaryEntryButton.clicked.connect(self.newItem)
        MainWindow.diarySaveButton.clicked.connect(lambda: self.save(self.ui.diaryTextDisplay,self.definer,"MainTexts/"))
        MainWindow.diarySummarizeButton.clicked.connect(Summarize)

        MainWindow.friendsSaveButton.clicked.connect(lambda: self.save(self.ui.friendsTextDisplay,'friends'))

        MainWindow.webScraperSaveButton.clicked.connect(lambda: self.saveEnumerated(self.ui.webScraperTextEdit,'Resume',folder = 'Resumes/'))
        MainWindow.webScraperParseButton.clicked.connect(lambda: SummarizeFromUrl(self.opened, self.ui.webScraperUrlEntry,self.ui.webScraperIdEntry,self.ui.webScraperTextEdit))

        MainWindow.busTrackingTrackButton.clicked.connect(lambda: TrackBuses(self.ui.busTrackingTextEntry,self.ui.busTrackingTextDisplay))

        MainWindow.musicAddEntryButton.clicked.connect(lambda:music.MusicAddItem(self))
        MainWindow.musicList.itemClicked.connect(lambda: music.openItem(self,self.definer,self.ui.musicList,self.ui.musicTextDisplay))
        MainWindow.musicSaveButton.clicked.connect(lambda: self.listSave(self.ui.musicTextDisplay,"",self.ui.musicList, folder = self.definer))
        MainWindow.musicPlayButton.clicked.connect(lambda: music.playMusic(self,self.ui.musicList))
        MainWindow.musicReplayButton.clicked.connect(lambda: music.replayMusic(self.ui.musicList))
        MainWindow.musicRewindButton.clicked.connect(lambda: music.changeTimePos(-5000))
        MainWindow.musicForwardButton.clicked.connect(lambda: music.changeTimePos(5000))





    def open_file(self,path,display, folder = ""):
        try:
            file = open(folder + path + ".txt",'r')
            with file:
                text = file.read()
            display.setText(text)
        except:
            print("File not found")


    def save(self,display,path,folder=None):
        mytext = display.toPlainText()
        def overwrite(path):
            file = open(folder + path+ ".txt" ,"w")
            file.write(str(mytext))
            file.close()
        overwrite(path)

    def saveEnumerated(self,display,path,folder = None):
        mytext = display.toPlainText()
        while os.path.isfile(os.getcwd() + folder + path + ".txt") == True:
            i+= 1
            path = path + str(i)
        file = open(folder + path + ".txt","w")
        file.write(str(mytext))
        file.close()

    def listSave(self,display,path,list,folder = ""):
        self.save(display,list.currentItem().text(),folder)


    def newItem(self):
        def subAdd(path):
            file = open('MainTexts/' + path + ".txt",'a+')
            text = self.ui.diaryTextEntry.toPlainText()
            file.write("\n\n")
            file.write(str(datetime.datetime.now())[:19] + ":" + "\n")
            file.write(text)
            file.close()
            file = open('MainTexts/' + path + ".txt",'r')
            self.ui.diaryTextEntry.clear()
        subAdd(self.definer)
        self.open_file(self.definer,self.ui.diaryTextDisplay,folder = "MainTexts/")



    def newListItem(self,lineEntry,textDisplay,list):
        item = lineEntry.text()
        items = list.findItems(item,QtCore.Qt.MatchExactly)
        if len(items) == 0:
            if item != "":
                textDisplay.clear()
                lineEntry.clear()
                list.addItem(item)

    def openItem(self,path,list,display):
        text = path + list.currentItem().text()
        self.open_file(text,display)


    def loadListFiles(self,path,list):
        for el in os.listdir(path):
            if el[-4:] == ".txt":
                list.addItem(el[:-4])

    def removeSel(self,list):
        listItems=[list.item(i) for i in range(list.count())]
        #if not listItems: return
        for item in listItems:
           list.takeItem(list.row(item))

    def OpenWindow(self,i, definer = None):
        """0 = Activities;1 = Diaries; 2 = Friends; 3 = WebScraper, 4 = Songs; 5 = BusTracking,6 = Compositions"""
        self.ui.Stack.setCurrentIndex(i)
        self.definer = definer
        if i == 4:
            self.removeSel(self.ui.musicList)
            self.mainWindow.resize(791, 980)
            self.loadListFiles(definer,self.ui.musicList)
        else:
            self.mainWindow.resize(791, 808)


        if i == 2:
            self.open_file("friends",self.ui.friendsTextDisplay,folder="MainTexts/")
        if i == 1:
            if self.definer == "psychoanalysis":
                self.password = Password()
                print(self.password.accepted)
                if self.password.accepted == False:
                    self.open_file("psychoanalysis",self.ui.diaryTextDisplay,folder = "MainTexts/")
            if self.definer == "diaryProject":
                self.open_file("diaryProject",self.ui.diaryTextDisplay,folder= "MainTexts/")




if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    main = Main()
    main.mainWindow.show()
    sys.exit(app.exec_())
